{"version":3,"file":"SolanaWalletUtil.js","sourceRoot":"","sources":["../../../src/utils/SolanaWalletUtil.ts"],"names":[],"mappings":";AAAA,OAAO,SAAS,MAAM,iBAAiB,CAAA;AAEvC,MAAM,CAAC,IAAI,OAAkB,CAAA;AAC7B,MAAM,CAAC,IAAI,OAAkB,CAAA;AAC7B,MAAM,CAAC,IAAI,aAAwC,CAAA;AACnD,MAAM,CAAC,IAAI,eAAyB,CAAA;AAEpC,IAAI,QAAgB,CAAA;AACpB,IAAI,QAAgB,CAAA;AAEpB;;GAEG;AACH,MAAM,UAAgB,2BAA2B;;;;;;;oBACzC,UAAU,GAAG,YAAY,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAA;oBACxD,UAAU,GAAG,YAAY,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAA;oBAE9D,IAAI,UAAU,IAAI,UAAU,EAAE;wBACtB,YAAY,GAAa,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAA;wBAC9D,YAAY,GAAa,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAA;wBACpE,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAA;wBACtE,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAA;qBACvE;yBAAM;wBACL,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;wBAC5B,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;wBAE5B,kEAAkE;wBAClE,YAAY,CAAC,OAAO,CAClB,qBAAqB,EACrB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CACtD,CAAA;wBACD,YAAY,CAAC,OAAO,CAClB,qBAAqB,EACrB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CACtD,CAAA;qBACF;oBAEU,qBAAM,OAAO,CAAC,UAAU,EAAE,EAAA;;oBAArC,QAAQ,GAAG,SAA0B,CAAA;oBAC1B,qBAAM,OAAO,CAAC,UAAU,EAAE,EAAA;;oBAArC,QAAQ,GAAG,SAA0B,CAAA;oBAErC,aAAa;wBACX,GAAC,QAAQ,IAAG,OAAO;wBACnB,GAAC,QAAQ,IAAG,OAAO;2BACpB,CAAA;oBACD,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;oBAE5C,sBAAO;4BACL,aAAa,eAAA;4BACb,eAAe,iBAAA;yBAChB,EAAA;;;;CACF","sourcesContent":["import SolanaLib from '@/lib/SolanaLib'\n\nexport let wallet1: SolanaLib\nexport let wallet2: SolanaLib\nexport let solanaWallets: Record<string, SolanaLib>\nexport let solanaAddresses: string[]\n\nlet address1: string\nlet address2: string\n\n/**\n * Utilities\n */\nexport async function createOrRestoreSolanaWallet() {\n  const secretKey1 = localStorage.getItem('SOLANA_SECRET_KEY_1')\n  const secretKey2 = localStorage.getItem('SOLANA_SECRET_KEY_2')\n\n  if (secretKey1 && secretKey2) {\n    const secretArray1: number[] = Object.values(JSON.parse(secretKey1))\n    const secretArray2: number[] = Object.values(JSON.parse(secretKey2))\n    wallet1 = SolanaLib.init({ secretKey: Uint8Array.from(secretArray1) })\n    wallet2 = SolanaLib.init({ secretKey: Uint8Array.from(secretArray2) })\n  } else {\n    wallet1 = SolanaLib.init({})\n    wallet2 = SolanaLib.init({})\n\n    // Don't store secretKey in local storage in a production project!\n    localStorage.setItem(\n      'SOLANA_SECRET_KEY_1',\n      JSON.stringify(Array.from(wallet1.keypair.secretKey))\n    )\n    localStorage.setItem(\n      'SOLANA_SECRET_KEY_2',\n      JSON.stringify(Array.from(wallet2.keypair.secretKey))\n    )\n  }\n\n  address1 = await wallet1.getAddress()\n  address2 = await wallet2.getAddress()\n\n  solanaWallets = {\n    [address1]: wallet1,\n    [address2]: wallet2\n  }\n  solanaAddresses = Object.keys(solanaWallets)\n\n  return {\n    solanaWallets,\n    solanaAddresses\n  }\n}\n"]}