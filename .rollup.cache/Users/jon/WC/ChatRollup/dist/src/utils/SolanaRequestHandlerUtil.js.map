{"version":3,"file":"SolanaRequestHandlerUtil.js","sourceRoot":"","sources":["../../../src/utils/SolanaRequestHandlerUtil.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,sBAAsB,EAAE,MAAM,mBAAmB,CAAA;AAC1D,OAAO,EAAE,0BAA0B,EAAE,MAAM,oBAAoB,CAAA;AAC/D,OAAO,EAAE,eAAe,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAA;AACzE,OAAO,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAA;AAE/E,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAA;AAElD,MAAM,UAAgB,oBAAoB,CACxC,YAA+D;;;;;;oBAEvD,MAAM,GAAS,YAAY,OAArB,EAAE,EAAE,GAAK,YAAY,GAAjB,CAAiB;oBAC3B,OAAO,GAAK,MAAM,QAAX,CAAW;oBACpB,MAAM,GAAG,aAAa,CAAC,0BAA0B,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC,CAAA;oBAEzE,KAAA,OAAO,CAAC,MAAM,CAAA;;6BACf,sBAAsB,CAAC,mBAAmB,CAAC,CAA3C,wBAA0C;6BAI1C,sBAAsB,CAAC,uBAAuB,CAAC,CAA/C,wBAA8C;;;wBAH3B,qBAAM,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,EAAA;;oBAAhE,aAAa,GAAG,SAAgD;oBACtE,sBAAO,mBAAmB,CAAC,EAAE,EAAE,aAAa,CAAC,EAAA;wBAGnB,qBAAM,MAAM,CAAC,eAAe,CACpD,OAAO,CAAC,MAAM,CAAC,QAAQ,EACvB,OAAO,CAAC,MAAM,CAAC,eAAe,EAC9B,OAAO,CAAC,MAAM,CAAC,YAAY,CAC5B,EAAA;;oBAJK,iBAAiB,GAAG,SAIzB;oBAED,sBAAO,mBAAmB,CAAC,EAAE,EAAE,iBAAiB,CAAC,EAAA;wBAGjD,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,CAAA;;;;CAE3D;AAED,MAAM,UAAU,mBAAmB,CAAC,OAA0D;IACpF,IAAA,EAAE,GAAK,OAAO,GAAZ,CAAY;IAEtB,OAAO,kBAAkB,CAAC,EAAE,EAAE,WAAW,CAAC,uBAAuB,CAAC,CAAC,OAAO,CAAC,CAAA;AAC7E,CAAC","sourcesContent":["import { SOLANA_SIGNING_METHODS } from '@/data/SolanaData'\nimport { getWalletAddressFromParams } from '@/utils/HelperUtil'\nimport { solanaAddresses, solanaWallets } from '@/utils/SolanaWalletUtil'\nimport { formatJsonRpcError, formatJsonRpcResult } from '@json-rpc-tools/utils'\nimport { SignClientTypes } from '@walletconnect/types'\nimport { getSdkError } from '@walletconnect/utils'\n\nexport async function approveSolanaRequest(\n  requestEvent: SignClientTypes.EventArguments['session_request']\n) {\n  const { params, id } = requestEvent\n  const { request } = params\n  const wallet = solanaWallets[getWalletAddressFromParams(solanaAddresses, params)]\n\n  switch (request.method) {\n    case SOLANA_SIGNING_METHODS.SOLANA_SIGN_MESSAGE:\n      const signedMessage = await wallet.signMessage(request.params.message)\n      return formatJsonRpcResult(id, signedMessage)\n\n    case SOLANA_SIGNING_METHODS.SOLANA_SIGN_TRANSACTION:\n      const signedTransaction = await wallet.signTransaction(\n        request.params.feePayer,\n        request.params.recentBlockhash,\n        request.params.instructions\n      )\n\n      return formatJsonRpcResult(id, signedTransaction)\n\n    default:\n      throw new Error(getSdkError('INVALID_METHOD').message)\n  }\n}\n\nexport function rejectSolanaRequest(request: SignClientTypes.EventArguments['session_request']) {\n  const { id } = request\n\n  return formatJsonRpcError(id, getSdkError('USER_REJECTED_METHODS').message)\n}\n"]}