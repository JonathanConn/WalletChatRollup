{"version":3,"file":"HelperUtil.js","sourceRoot":"","sources":["../../../src/utils/HelperUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { COSMOS_MAINNET_CHAINS, TCosmosChain } from '@/data/COSMOSData'\nimport { EIP155_CHAINS, TEIP155Chain } from '@/data/EIP155Data'\nimport { SOLANA_CHAINS, TSolanaChain } from '@/data/SolanaData'\nimport { utils } from 'ethers'\n\n/**\n * Truncates string (in the middle) via given lenght value\n */\nexport function truncate(value: string, length: number) {\n  if (value?.length <= length) {\n    return value\n  }\n\n  const separator = '...'\n  const stringLength = length - separator.length\n  const frontLength = Math.ceil(stringLength / 2)\n  const backLength = Math.floor(stringLength / 2)\n\n  return value.substring(0, frontLength) + separator + value.substring(value.length - backLength)\n}\n\n/**\n * Converts hex to utf8 string if it is valid bytes\n */\nexport function convertHexToUtf8(value: string) {\n  if (utils.isHexString(value)) {\n    return utils.toUtf8String(value)\n  }\n\n  return value\n}\n\n/**\n * Gets message from various signing request methods by filtering out\n * a value that is not an address (thus is a message).\n * If it is a hex string, it gets converted to utf8 string\n */\nexport function getSignParamsMessage(params: string[]) {\n  const message = params.filter(p => !utils.isAddress(p))[0]\n\n  return convertHexToUtf8(message)\n}\n\n/**\n * Gets data from various signTypedData request methods by filtering out\n * a value that is not an address (thus is data).\n * If data is a string convert it to object\n */\nexport function getSignTypedDataParamsData(params: string[]) {\n  const data = params.filter(p => !utils.isAddress(p))[0]\n\n  if (typeof data === 'string') {\n    return JSON.parse(data)\n  }\n\n  return data\n}\n\n/**\n * Get our address from params checking if params string contains one\n * of our wallet addresses\n */\nexport function getWalletAddressFromParams(addresses: string[], params: any) {\n  const paramsString = JSON.stringify(params)\n  let address = ''\n\n  addresses.forEach(addr => {\n    if (paramsString.includes(addr)) {\n      address = addr\n    }\n  })\n\n  return address\n}\n\n/**\n * Check if chain is part of EIP155 standard\n */\nexport function isEIP155Chain(chain: string) {\n  return chain.includes('eip155')\n}\n\n/**\n * Check if chain is part of COSMOS standard\n */\nexport function isCosmosChain(chain: string) {\n  return chain.includes('cosmos')\n}\n\n/**\n * Check if chain is part of SOLANA standard\n */\nexport function isSolanaChain(chain: string) {\n  return chain.includes('solana')\n}\n\n/**\n * Formats chainId to its name\n */\nexport function formatChainName(chainId: string) {\n  return (\n    EIP155_CHAINS[chainId as TEIP155Chain]?.name ??\n    COSMOS_MAINNET_CHAINS[chainId as TCosmosChain]?.name ??\n    SOLANA_CHAINS[chainId as TSolanaChain]?.name ??\n    chainId\n  )\n}\n"]}