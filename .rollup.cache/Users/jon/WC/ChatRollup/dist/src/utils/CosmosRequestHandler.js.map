{"version":3,"file":"CosmosRequestHandler.js","sourceRoot":"","sources":["../../../src/utils/CosmosRequestHandler.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,sBAAsB,EAAE,MAAM,mBAAmB,CAAA;AAC1D,OAAO,EAAE,eAAe,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAA;AACzE,OAAO,EAAE,0BAA0B,EAAE,MAAM,oBAAoB,CAAA;AAC/D,OAAO,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAA;AAE/E,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAA;AAClD,OAAO,EAAE,kBAAkB,EAAE,MAAM,eAAe,CAAA;AAElD,MAAM,UAAgB,oBAAoB,CACxC,YAA+D;;;;;;oBAEvD,MAAM,GAAS,YAAY,OAArB,EAAE,EAAE,GAAK,YAAY,GAAjB,CAAiB;oBAC3B,OAAO,GAAK,MAAM,QAAX,CAAW;oBACpB,MAAM,GAAG,aAAa,CAAC,0BAA0B,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC,CAAA;oBAEzE,KAAA,OAAO,CAAC,MAAM,CAAA;;6BACf,sBAAsB,CAAC,kBAAkB,CAAC,CAA1C,wBAAyC;6BAOzC,sBAAsB,CAAC,iBAAiB,CAAC,CAAzC,wBAAwC;;;wBANtB,qBAAM,MAAM,CAAC,UAAU,CAC1C,OAAO,CAAC,MAAM,CAAC,aAAa,EAC5B,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAC3C,EAAA;;oBAHK,YAAY,GAAG,SAGpB;oBACD,sBAAO,mBAAmB,CAAC,EAAE,EAAE,YAAY,CAAC,SAAS,CAAC,EAAA;wBAGlC,qBAAM,MAAM,CAAC,SAAS,CACxC,OAAO,CAAC,MAAM,CAAC,aAAa,EAC5B,OAAO,CAAC,MAAM,CAAC,OAAO,CACvB,EAAA;;oBAHK,WAAW,GAAG,SAGnB;oBACD,sBAAO,mBAAmB,CAAC,EAAE,EAAE,WAAW,CAAC,SAAS,CAAC,EAAA;wBAGrD,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,CAAA;;;;CAE3D;AAED,MAAM,UAAU,mBAAmB,CAAC,OAA0D;IACpF,IAAA,EAAE,GAAK,OAAO,GAAZ,CAAY;IAEtB,OAAO,kBAAkB,CAAC,EAAE,EAAE,WAAW,CAAC,uBAAuB,CAAC,CAAC,OAAO,CAAC,CAAA;AAC7E,CAAC","sourcesContent":["import { COSMOS_SIGNING_METHODS } from '@/data/COSMOSData'\nimport { cosmosAddresses, cosmosWallets } from '@/utils/CosmosWalletUtil'\nimport { getWalletAddressFromParams } from '@/utils/HelperUtil'\nimport { formatJsonRpcError, formatJsonRpcResult } from '@json-rpc-tools/utils'\nimport { SignClientTypes } from '@walletconnect/types'\nimport { getSdkError } from '@walletconnect/utils'\nimport { parseSignDocValues } from 'cosmos-wallet'\n\nexport async function approveCosmosRequest(\n  requestEvent: SignClientTypes.EventArguments['session_request']\n) {\n  const { params, id } = requestEvent\n  const { request } = params\n  const wallet = cosmosWallets[getWalletAddressFromParams(cosmosAddresses, params)]\n\n  switch (request.method) {\n    case COSMOS_SIGNING_METHODS.COSMOS_SIGN_DIRECT:\n      const signedDirect = await wallet.signDirect(\n        request.params.signerAddress,\n        parseSignDocValues(request.params.signDoc)\n      )\n      return formatJsonRpcResult(id, signedDirect.signature)\n\n    case COSMOS_SIGNING_METHODS.COSMOS_SIGN_AMINO:\n      const signedAmino = await wallet.signAmino(\n        request.params.signerAddress,\n        request.params.signDoc\n      )\n      return formatJsonRpcResult(id, signedAmino.signature)\n\n    default:\n      throw new Error(getSdkError('INVALID_METHOD').message)\n  }\n}\n\nexport function rejectCosmosRequest(request: SignClientTypes.EventArguments['session_request']) {\n  const { id } = request\n\n  return formatJsonRpcError(id, getSdkError('USER_REJECTED_METHODS').message)\n}\n"]}