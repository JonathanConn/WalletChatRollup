{"version":3,"file":"EIP155WalletUtil.js","sourceRoot":"","sources":["../../../src/utils/EIP155WalletUtil.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,iBAAiB,CAAA;AAEvC,MAAM,CAAC,IAAI,OAAkB,CAAA;AAC7B,MAAM,CAAC,IAAI,OAAkB,CAAA;AAC7B,MAAM,CAAC,IAAI,aAAwC,CAAA;AACnD,MAAM,CAAC,IAAI,eAAyB,CAAA;AAEpC,IAAI,QAAgB,CAAA;AACpB,IAAI,QAAgB,CAAA;AAEpB;;GAEG;AACH,MAAM,UAAU,2BAA2B;;IACzC,IAAM,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAA;IAC3D,IAAM,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAA;IAE3D,IAAI,SAAS,IAAI,SAAS,EAAE;QAC1B,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAA;QACjD,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAA;KAClD;SAAM;QACL,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;QAC5B,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;QAE5B,iEAAiE;QACjE,YAAY,CAAC,OAAO,CAAC,mBAAmB,EAAE,OAAO,CAAC,WAAW,EAAE,CAAC,CAAA;QAChE,YAAY,CAAC,OAAO,CAAC,mBAAmB,EAAE,OAAO,CAAC,WAAW,EAAE,CAAC,CAAA;KACjE;IAED,QAAQ,GAAG,OAAO,CAAC,UAAU,EAAE,CAAA;IAC/B,QAAQ,GAAG,OAAO,CAAC,UAAU,EAAE,CAAA;IAE/B,aAAa;QACX,GAAC,QAAQ,IAAG,OAAO;QACnB,GAAC,QAAQ,IAAG,OAAO;WACpB,CAAA;IACD,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;IAE5C,OAAO;QACL,aAAa,eAAA;QACb,eAAe,iBAAA;KAChB,CAAA;AACH,CAAC","sourcesContent":["import EIP155Lib from '@/lib/EIP155Lib'\n\nexport let wallet1: EIP155Lib\nexport let wallet2: EIP155Lib\nexport let eip155Wallets: Record<string, EIP155Lib>\nexport let eip155Addresses: string[]\n\nlet address1: string\nlet address2: string\n\n/**\n * Utilities\n */\nexport function createOrRestoreEIP155Wallet() {\n  const mnemonic1 = localStorage.getItem('EIP155_MNEMONIC_1')\n  const mnemonic2 = localStorage.getItem('EIP155_MNEMONIC_2')\n\n  if (mnemonic1 && mnemonic2) {\n    wallet1 = EIP155Lib.init({ mnemonic: mnemonic1 })\n    wallet2 = EIP155Lib.init({ mnemonic: mnemonic2 })\n  } else {\n    wallet1 = EIP155Lib.init({})\n    wallet2 = EIP155Lib.init({})\n\n    // Don't store mnemonic in local storage in a production project!\n    localStorage.setItem('EIP155_MNEMONIC_1', wallet1.getMnemonic())\n    localStorage.setItem('EIP155_MNEMONIC_2', wallet2.getMnemonic())\n  }\n\n  address1 = wallet1.getAddress()\n  address2 = wallet2.getAddress()\n\n  eip155Wallets = {\n    [address1]: wallet1,\n    [address2]: wallet2\n  }\n  eip155Addresses = Object.keys(eip155Wallets)\n\n  return {\n    eip155Wallets,\n    eip155Addresses\n  }\n}\n"]}