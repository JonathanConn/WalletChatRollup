{"version":3,"file":"EIP155RequestHandlerUtil.js","sourceRoot":"","sources":["../../../src/utils/EIP155RequestHandlerUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { EIP155_CHAINS, EIP155_SIGNING_METHODS, TEIP155Chain } from '@/data/EIP155Data'\nimport { eip155Addresses, eip155Wallets } from '@/utils/EIP155WalletUtil'\nimport {\n  getSignParamsMessage,\n  getSignTypedDataParamsData,\n  getWalletAddressFromParams\n} from '@/utils/HelperUtil'\nimport { formatJsonRpcError, formatJsonRpcResult } from '@json-rpc-tools/utils'\nimport { SignClientTypes } from '@walletconnect/types'\nimport { getSdkError } from '@walletconnect/utils'\nimport { providers } from 'ethers'\n\nexport async function approveEIP155Request(\n  requestEvent: SignClientTypes.EventArguments['session_request']\n) {\n  const { params, id } = requestEvent\n  const { chainId, request } = params\n  const wallet = eip155Wallets[getWalletAddressFromParams(eip155Addresses, params)]\n\n  switch (request.method) {\n    case EIP155_SIGNING_METHODS.PERSONAL_SIGN:\n    case EIP155_SIGNING_METHODS.ETH_SIGN:\n      const message = getSignParamsMessage(request.params)\n      const signedMessage = await wallet.signMessage(message)\n      return formatJsonRpcResult(id, signedMessage)\n\n    case EIP155_SIGNING_METHODS.ETH_SIGN_TYPED_DATA:\n    case EIP155_SIGNING_METHODS.ETH_SIGN_TYPED_DATA_V3:\n    case EIP155_SIGNING_METHODS.ETH_SIGN_TYPED_DATA_V4:\n      const { domain, types, message: data } = getSignTypedDataParamsData(request.params)\n      // https://github.com/ethers-io/ethers.js/issues/687#issuecomment-714069471\n      delete types.EIP712Domain\n      const signedData = await wallet._signTypedData(domain, types, data)\n      return formatJsonRpcResult(id, signedData)\n\n    case EIP155_SIGNING_METHODS.ETH_SEND_TRANSACTION:\n      const provider = new providers.JsonRpcProvider(EIP155_CHAINS[chainId as TEIP155Chain].rpc)\n      const sendTransaction = request.params[0]\n      const connectedWallet = wallet.connect(provider)\n      const { hash } = await connectedWallet.sendTransaction(sendTransaction)\n      return formatJsonRpcResult(id, hash)\n\n    case EIP155_SIGNING_METHODS.ETH_SIGN_TRANSACTION:\n      const signTransaction = request.params[0]\n      const signature = await wallet.signTransaction(signTransaction)\n      return formatJsonRpcResult(id, signature)\n\n    default:\n      throw new Error(getSdkError('INVALID_METHOD').message)\n  }\n}\n\nexport function rejectEIP155Request(request: SignClientTypes.EventArguments['session_request']) {\n  const { id } = request\n\n  return formatJsonRpcError(id, getSdkError('USER_REJECTED_METHODS').message)\n}\n"]}