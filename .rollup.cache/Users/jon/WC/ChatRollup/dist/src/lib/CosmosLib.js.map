{"version":3,"file":"CosmosLib.js","sourceRoot":"","sources":["../../../src/lib/CosmosLib.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,eAAe,EAAc,MAAM,eAAe,CAAA;AAC3D,OAAO,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAA;AAC1C,OAAO,EAAE,qBAAqB,EAAE,MAAM,uBAAuB,CAAA;AAG7D,OAAO,OAAO,MAAM,kBAAkB,CAAA;AAEtC;;GAEG;AACH,IAAM,YAAY,GAAG,mBAAmB,CAAA;AACxC,IAAM,cAAc,GAAG,QAAQ,CAAA;AAW/B;;GAEG;AACH;IAKE,mBAAY,OAAgB,EAAE,YAAmC,EAAE,WAA4B;QAC7F,IAAI,CAAC,YAAY,GAAG,YAAY,CAAA;QAChC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;IAChC,CAAC;IAEY,cAAI,GAAjB,UAAkB,EAA0C;YAAxC,QAAQ,cAAA,EAAE,IAAI,UAAA,EAAE,MAAM,YAAA;;;;;4BACxB,qBAAM,OAAO,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAA;;wBAAlF,OAAO,GAAG,SAAwE;wBAClF,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,YAAY,CAAC,CAAC,CAAA;wBAClD,qBAAM,qBAAqB,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,cAAc,CAAC,EAAA;;wBAAxF,YAAY,GAAG,SAAyE;wBAC1E,qBAAM,eAAe,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,cAAc,CAAC,EAAA;;wBAAjF,WAAW,GAAG,SAAmE;wBAEvF,sBAAO,IAAI,SAAS,CAAC,OAAO,EAAE,YAAY,EAAE,WAAW,CAAC,EAAA;;;;KACzD;IAEM,+BAAW,GAAlB;QACE,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAA;IAC9B,CAAC;IAEY,8BAAU,GAAvB;;;;;4BACkB,qBAAM,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,EAAA;;wBAA/C,OAAO,GAAG,SAAqC;wBAErD,sBAAO,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAA;;;;KAC1B;IAEY,8BAAU,GAAvB,UAAwB,OAAe,EAAE,OAAgB;;;;4BAChD,qBAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,EAAA;4BAA3D,sBAAO,SAAoD,EAAA;;;;KAC5D;IAEY,6BAAS,GAAtB,UAAuB,OAAe,EAAE,OAAmB;;;;4BAClD,qBAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,EAAA;4BAAzD,sBAAO,SAAkD,EAAA;;;;KAC1D;IACH,gBAAC;AAAD,CAAC,AArCD,IAqCC","sourcesContent":["import { Secp256k1Wallet, StdSignDoc } from '@cosmjs/amino'\nimport { fromHex } from '@cosmjs/encoding'\nimport { DirectSecp256k1Wallet } from '@cosmjs/proto-signing'\n// @ts-expect-error\nimport { SignDoc } from '@cosmjs/proto-signing/build/codec/cosmos/tx/v1beta1/tx'\nimport Keyring from 'mnemonic-keyring'\n\n/**\n * Constants\n */\nconst DEFAULT_PATH = \"m/44'/118'/0'/0/0\"\nconst DEFAULT_PREFIX = 'cosmos'\n\n/**\n * Types\n */\ninterface IInitArguments {\n  mnemonic?: string\n  path?: string\n  prefix?: string\n}\n\n/**\n * Library\n */\nexport default class CosmosLib {\n  private keyring: Keyring\n  private directSigner: DirectSecp256k1Wallet\n  private aminoSigner: Secp256k1Wallet\n\n  constructor(keyring: Keyring, directSigner: DirectSecp256k1Wallet, aminoSigner: Secp256k1Wallet) {\n    this.directSigner = directSigner\n    this.keyring = keyring\n    this.aminoSigner = aminoSigner\n  }\n\n  static async init({ mnemonic, path, prefix }: IInitArguments) {\n    const keyring = await Keyring.init({ mnemonic: mnemonic ?? Keyring.generateMnemonic() })\n    const privateKey = fromHex(keyring.getPrivateKey(path ?? DEFAULT_PATH))\n    const directSigner = await DirectSecp256k1Wallet.fromKey(privateKey, prefix ?? DEFAULT_PREFIX)\n    const aminoSigner = await Secp256k1Wallet.fromKey(privateKey, prefix ?? DEFAULT_PREFIX)\n\n    return new CosmosLib(keyring, directSigner, aminoSigner)\n  }\n\n  public getMnemonic() {\n    return this.keyring.mnemonic\n  }\n\n  public async getAddress() {\n    const account = await this.directSigner.getAccounts()\n\n    return account[0].address\n  }\n\n  public async signDirect(address: string, signDoc: SignDoc) {\n    return await this.directSigner.signDirect(address, signDoc)\n  }\n\n  public async signAmino(address: string, signDoc: StdSignDoc) {\n    return await this.aminoSigner.signAmino(address, signDoc)\n  }\n}\n"]}