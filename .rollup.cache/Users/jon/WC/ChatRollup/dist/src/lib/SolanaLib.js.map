{"version":3,"file":"SolanaLib.js","sourceRoot":"","sources":["../../../src/lib/SolanaLib.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAA;AACzC,OAAO,IAAI,MAAM,MAAM,CAAA;AACvB,OAAO,IAAI,MAAM,WAAW,CAAA;AAC5B,OAAO,YAAuC,MAAM,eAAe,CAAA;AASnE;;GAEG;AACH;IAIE,mBAAY,OAAgB;QAC1B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,YAAY,GAAG,IAAI,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAA;IACtE,CAAC;IAEM,cAAI,GAAX,UAAY,EAA6B;YAA3B,SAAS,eAAA;QACrB,IAAM,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAA;QAEjF,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,CAAA;IAC/B,CAAC;IAEY,8BAAU,GAAvB;;;;4BACS,qBAAM,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAA;4BAA9C,sBAAO,SAAuC,EAAA;;;;KAC/C;IAEM,gCAAY,GAAnB;QACE,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAA;IAC1C,CAAC;IAEY,+BAAW,GAAxB,UAAyB,OAAe;;;;gBAChC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;gBAC5E,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAA;gBAE5C,sBAAO,EAAE,SAAS,EAAE,aAAa,EAAE,EAAA;;;KACpC;IAEY,mCAAe,GAA5B,UACE,QAA2C,EAC3C,eAAyD,EACzD,YAAmD,EACnD,iBAA8D;;;;;4BAExC,qBAAM,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,QAAQ,EAAE;4BACtE,QAAQ,UAAA;4BACR,YAAY,cAAA;4BACZ,eAAe,iBAAA;4BACf,iBAAiB,EAAE,iBAAiB,aAAjB,iBAAiB,cAAjB,iBAAiB,GAAI,EAAE;yBAC3C,CAAC,EAAA;;wBALM,SAAS,GAAK,CAAA,SAKpB,CAAA,UALe;wBAOjB,sBAAO,EAAE,SAAS,WAAA,EAAE,EAAA;;;;KACrB;IACH,gBAAC;AAAD,CAAC,AA7CD,IA6CC","sourcesContent":["import { Keypair } from '@solana/web3.js'\nimport bs58 from 'bs58'\nimport nacl from 'tweetnacl'\nimport SolanaWallet, { SolanaSignTransaction } from 'solana-wallet'\n\n/**\n * Types\n */\ninterface IInitArguments {\n  secretKey?: Uint8Array\n}\n\n/**\n * Library\n */\nexport default class SolanaLib {\n  keypair: Keypair\n  solanaWallet: SolanaWallet\n\n  constructor(keypair: Keypair) {\n    this.keypair = keypair\n    this.solanaWallet = new SolanaWallet(Buffer.from(keypair.secretKey))\n  }\n\n  static init({ secretKey }: IInitArguments) {\n    const keypair = secretKey ? Keypair.fromSecretKey(secretKey) : Keypair.generate()\n\n    return new SolanaLib(keypair)\n  }\n\n  public async getAddress() {\n    return await this.keypair.publicKey.toBase58()\n  }\n\n  public getSecretKey() {\n    return this.keypair.secretKey.toString()\n  }\n\n  public async signMessage(message: string) {\n    const signature = nacl.sign.detached(bs58.decode(message), this.keypair.secretKey)\n    const bs58Signature = bs58.encode(signature)\n\n    return { signature: bs58Signature }\n  }\n\n  public async signTransaction(\n    feePayer: SolanaSignTransaction['feePayer'],\n    recentBlockhash: SolanaSignTransaction['recentBlockhash'],\n    instructions: SolanaSignTransaction['instructions'],\n    partialSignatures?: SolanaSignTransaction['partialSignatures']\n  ) {\n    const { signature } = await this.solanaWallet.signTransaction(feePayer, {\n      feePayer,\n      instructions,\n      recentBlockhash,\n      partialSignatures: partialSignatures ?? []\n    })\n\n    return { signature }\n  }\n}\n"]}