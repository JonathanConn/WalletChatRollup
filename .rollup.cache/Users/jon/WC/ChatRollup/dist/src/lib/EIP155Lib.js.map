{"version":3,"file":"EIP155Lib.js","sourceRoot":"","sources":["../../../src/lib/EIP155Lib.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,MAAM,EAAE,MAAM,QAAQ,CAAA;AAS1C;;GAEG;AACH;IAGE,mBAAY,MAAc;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;IACtB,CAAC;IAEM,cAAI,GAAX,UAAY,EAAuB;YAArB,QAAQ,cAAA;QACpB,IAAM,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,EAAE,CAAA;QAE/E,OAAO,IAAI,SAAS,CAAC,MAAM,CAAC,CAAA;IAC9B,CAAC;IAED,+BAAW,GAAX;QACE,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAA;IACpC,CAAC;IAED,8BAAU,GAAV;QACE,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAA;IAC5B,CAAC;IAED,+BAAW,GAAX,UAAY,OAAe;QACzB,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;IACzC,CAAC;IAED,kCAAc,GAAd,UAAe,MAAW,EAAE,KAAU,EAAE,IAAS;QAC/C,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;IACxD,CAAC;IAED,2BAAO,GAAP,UAAQ,QAAmC;QACzC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;IACtC,CAAC;IAED,mCAAe,GAAf,UAAgB,WAAyC;QACvD,OAAO,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAA;IACjD,CAAC;IACH,gBAAC;AAAD,CAAC,AApCD,IAoCC","sourcesContent":["import { providers, Wallet } from 'ethers'\n\n/**\n * Types\n */\ninterface IInitArgs {\n  mnemonic?: string\n}\n\n/**\n * Library\n */\nexport default class EIP155Lib {\n  wallet: Wallet\n\n  constructor(wallet: Wallet) {\n    this.wallet = wallet\n  }\n\n  static init({ mnemonic }: IInitArgs) {\n    const wallet = mnemonic ? Wallet.fromMnemonic(mnemonic) : Wallet.createRandom()\n\n    return new EIP155Lib(wallet)\n  }\n\n  getMnemonic() {\n    return this.wallet.mnemonic.phrase\n  }\n\n  getAddress() {\n    return this.wallet.address\n  }\n\n  signMessage(message: string) {\n    return this.wallet.signMessage(message)\n  }\n\n  _signTypedData(domain: any, types: any, data: any) {\n    return this.wallet._signTypedData(domain, types, data)\n  }\n\n  connect(provider: providers.JsonRpcProvider) {\n    return this.wallet.connect(provider)\n  }\n\n  signTransaction(transaction: providers.TransactionRequest) {\n    return this.wallet.signTransaction(transaction)\n  }\n}\n"]}