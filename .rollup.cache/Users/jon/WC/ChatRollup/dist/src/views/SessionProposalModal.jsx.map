{"version":3,"file":"SessionProposalModal.jsx","sourceRoot":"","sources":["../../../src/views/SessionProposalModal.tsx"],"names":[],"mappings":"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","sourcesContent":["import ProjectInfoCard from '@/components/ProjectInfoCard'\nimport ProposalSelectSection from '@/components/ProposalSelectSection'\nimport RequestModalContainer from '@/components/RequestModalContainer'\nimport SessionProposalChainCard from '@/components/SessionProposalChainCard'\nimport ModalStore from '@/store/ModalStore'\nimport { cosmosAddresses } from '@/utils/CosmosWalletUtil'\nimport { eip155Addresses } from '@/utils/EIP155WalletUtil'\nimport { isCosmosChain, isEIP155Chain, isSolanaChain } from '@/utils/HelperUtil'\nimport { solanaAddresses } from '@/utils/SolanaWalletUtil'\nimport { signClient } from '@/utils/WalletConnectUtil'\nimport { Button, Divider, Modal, Text } from '@nextui-org/react'\nimport { SessionTypes } from '@walletconnect/types'\nimport { getSdkError } from '@walletconnect/utils'\nimport { Fragment, useState } from 'react'\n\nexport default function SessionProposalModal() {\n  const [selectedAccounts, setSelectedAccounts] = useState<Record<string, string[]>>({})\n  const hasSelected = Object.keys(selectedAccounts).length\n\n  // Get proposal data and wallet address from store\n  const proposal = ModalStore.state.data?.proposal\n\n  // Ensure proposal is defined\n  if (!proposal) {\n    return <Text>Missing proposal data</Text>\n  }\n\n  // Get required proposal data\n  const { id, params } = proposal\n  const { proposer, requiredNamespaces, relays } = params\n\n  // Add / remove address from EIP155 selection\n  function onSelectAccount(chain: string, account: string) {\n    if (selectedAccounts[chain]?.includes(account)) {\n      const newSelectedAccounts = selectedAccounts[chain]?.filter(a => a !== account)\n      setSelectedAccounts(prev => ({\n        ...prev,\n        [chain]: newSelectedAccounts\n      }))\n    } else {\n      const prevChainAddresses = selectedAccounts[chain] ?? []\n      setSelectedAccounts(prev => ({\n        ...prev,\n        [chain]: [...prevChainAddresses, account]\n      }))\n    }\n  }\n\n  // Hanlde approve action, construct session namespace\n  async function onApprove() {\n    if (proposal) {\n      const namespaces: SessionTypes.Namespaces = {}\n      Object.keys(requiredNamespaces).forEach(key => {\n        const accounts: string[] = []\n        requiredNamespaces[key].chains.map(chain => {\n          selectedAccounts[key].map(acc => accounts.push(`${chain}:${acc}`))\n        })\n        namespaces[key] = {\n          accounts,\n          methods: requiredNamespaces[key].methods,\n          events: requiredNamespaces[key].events\n        }\n      })\n\n      const { acknowledged } = await signClient.approve({\n        id,\n        relayProtocol: relays[0].protocol,\n        namespaces\n      })\n      await acknowledged()\n    }\n    ModalStore.close()\n  }\n\n  // Hanlde reject action\n  async function onReject() {\n    if (proposal) {\n      await signClient.reject({\n        id,\n        reason: getSdkError('USER_REJECTED_METHODS')\n      })\n    }\n    ModalStore.close()\n  }\n\n  // Render account selection checkboxes based on chain\n  function renderAccountSelection(chain: string) {\n    if (isEIP155Chain(chain)) {\n      return (\n        <ProposalSelectSection\n          addresses={eip155Addresses}\n          selectedAddresses={selectedAccounts[chain]}\n          onSelect={onSelectAccount}\n          chain={chain}\n        />\n      )\n    } else if (isCosmosChain(chain)) {\n      return (\n        <ProposalSelectSection\n          addresses={cosmosAddresses}\n          selectedAddresses={selectedAccounts[chain]}\n          onSelect={onSelectAccount}\n          chain={chain}\n        />\n      )\n    } else if (isSolanaChain(chain)) {\n      return (\n        <ProposalSelectSection\n          addresses={solanaAddresses}\n          selectedAddresses={selectedAccounts[chain]}\n          onSelect={onSelectAccount}\n          chain={chain}\n        />\n      )\n    }\n  }\n\n  return (\n    <Fragment>\n      <RequestModalContainer title=\"Session Proposal\">\n        <ProjectInfoCard metadata={proposer.metadata} />\n\n        {/* TODO(ilja) Relays selection */}\n\n        <Divider y={2} />\n\n        {Object.keys(requiredNamespaces).map(chain => {\n          return (\n            <Fragment key={chain}>\n              <Text h4 css={{ marginBottom: '$5' }}>{`Review ${chain} permissions`}</Text>\n              <SessionProposalChainCard requiredNamespace={requiredNamespaces[chain]} />\n              {renderAccountSelection(chain)}\n              <Divider y={2} />\n            </Fragment>\n          )\n        })}\n      </RequestModalContainer>\n\n      <Modal.Footer>\n        <Button auto flat color=\"error\" onClick={onReject}>\n          Reject\n        </Button>\n\n        <Button\n          auto\n          flat\n          color=\"success\"\n          onClick={onApprove}\n          disabled={!hasSelected}\n          css={{ opacity: hasSelected ? 1 : 0.4 }}\n        >\n          Approve\n        </Button>\n      </Modal.Footer>\n    </Fragment>\n  )\n}\n"]}