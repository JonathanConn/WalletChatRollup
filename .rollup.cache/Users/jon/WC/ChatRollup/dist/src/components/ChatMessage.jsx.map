{"version":3,"file":"ChatMessage.jsx","sourceRoot":"","sources":["../../../src/components/ChatMessage.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAU,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,mBAAmB,CAAA;AAC9D,OAAO,UAAU,MAAM,cAAc,CAAA;AAErC,IAAM,OAAO,GAAG,MAAM,CAAC,KAAK,EAAE;IAC5B,OAAO,EAAE,MAAM;IACf,UAAU,EAAE,UAAU;IACtB,MAAM,EAAE,WAAW;IACnB,QAAQ,EAAE;QACR,WAAW,EAAE;YACX,QAAQ,EAAE;gBACR,SAAS,EAAE,YAAY;aACxB;YACD,QAAQ,EAAE;gBACR,SAAS,EAAE,UAAU;gBACrB,aAAa,EAAE,aAAa;aAC7B;SACF;KACF;CACK,CAAC,CAAA;AAET,IAAM,gBAAgB,GAAG,MAAM,CAAC,KAAK,EAAE;IACrC,QAAQ,EAAE,UAAU;IACpB,KAAK,EAAE,aAAa;IACpB,OAAO,EAAE,iBAAiB;IAC1B,SAAS,EAAE,MAAM;IACjB,SAAS,EAAE,YAAY;IACvB,KAAK,EAAE,UAAU;IACjB,QAAQ,EAAE;QACR,WAAW,EAAE;YACX,QAAQ,EAAE;gBACR,UAAU,EAAE,oBAAoB;gBAChC,SAAS,EAAE,YAAY;gBACvB,YAAY,EAAE,oBAAoB;aACnC;YACD,QAAQ,EAAE;gBACR,UAAU,EAAE,UAAU;gBACtB,SAAS,EAAE,UAAU;gBACrB,YAAY,EAAE,oBAAoB;aACnC;SACF;KACF;CACK,CAAC,CAAA;AAOT,MAAM,CAAC,OAAO,UAAU,WAAW,CAAC,EAAgC;QAA9B,WAAW,iBAAA,EAAE,OAAO,aAAA;IACxD,OAAO;IACL,iBAAiB;IACjB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,CAChC;MAAA,CAAC,WAAW,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,AAAD,EAAG,CAAC,CAAC,CAAC,IAAI,CAEnD;;MAAA,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAC3D;QAAA,CAAC;;;;aAII,CACL;QAAA,CAAC,iBAAiB,CAClB;QAAA,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,CACzC;UAAA,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI,CACxC;QAAA,EAAE,gBAAgB,CACpB;MAAA,EAAE,IAAI,CAAC,SAAS,CAClB;IAAA,EAAE,OAAO,CAAC,CACX,CAAA;AACH,CAAC","sourcesContent":["import { Avatar, Grid, styled, Text } from '@nextui-org/react'\nimport ChatAvatar from './ChatAvatar'\n\nconst Wrapper = styled('div', {\n  display: 'flex',\n  alignItems: 'flex-end',\n  margin: '0.25rem 0',\n  variants: {\n    messageType: {\n      incoming: {\n        alignSelf: 'flex-start'\n      },\n      outgoing: {\n        alignSelf: 'flex-end',\n        flexDirection: 'row-reverse'\n      }\n    }\n  }\n} as any)\n\nconst MessageContainer = styled('div', {\n  position: 'relative',\n  width: 'fit-content',\n  padding: '0.25rem 0.75rem',\n  textAlign: 'left',\n  wordBreak: 'break-word',\n  color: '$grey500',\n  variants: {\n    messageType: {\n      incoming: {\n        background: '$chatPurplePrimary',\n        alignSelf: 'flex-start',\n        borderRadius: '20px 20px 20px 6px'\n      },\n      outgoing: {\n        background: '$gray800',\n        alignSelf: 'flex-end',\n        borderRadius: '20px 20px 6px 20px'\n      }\n    }\n  }\n} as any)\n\ninterface IProps {\n  messageType: 'incoming' | 'outgoing'\n  message: string\n}\n\nexport default function ChatMessage({ messageType, message }: IProps) {\n  return (\n    /*  @ts-ignore */\n    <Wrapper messageType={messageType}>\n      {messageType === 'incoming' ? <ChatAvatar /> : null}\n\n      <Grid.Container direction=\"column\" css={{ margin: '0.5rem' }}>\n        {/* {messageType === 'incoming' && (\n          <Text size={12} color={'$secondary'}>\n            username.eth\n          </Text>\n        )} */}\n        {/*  @ts-ignore */}\n        <MessageContainer messageType={messageType}>\n          <Text color=\"$gray100\">{message}</Text>\n        </MessageContainer>\n      </Grid.Container>\n    </Wrapper>\n  )\n}\n"]}