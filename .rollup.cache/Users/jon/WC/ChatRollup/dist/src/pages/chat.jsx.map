{"version":3,"file":"chat.jsx","sourceRoot":"","sources":["../../../src/pages/chat.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Fragment, useEffect, useRef, useState } from 'react'\nimport { styled } from '@nextui-org/react'\nimport { useRouter } from 'next/router'\nimport { useSnapshot } from 'valtio'\n\nimport ChatboxInput from '@/components/ChatboxInput'\nimport ChatMessage from '@/components/ChatMessage'\nimport PageHeader from '@/components/PageHeader'\nimport { demoAddressResolver } from '@/config/chatConstants'\nimport SettingsStore from '@/store/SettingsStore'\nimport { chatClient } from '@/utils/WalletConnectUtil'\nimport { truncate } from '@/utils/HelperUtil'\n\nconst ChatContainer = styled('div', {\n  display: 'flex',\n  flexDirection: 'column',\n  flexGrow: 1,\n  height: '84%',\n  maxWidth: '100%'\n} as any)\n\nconst MessagesContainer = styled('div', {\n  display: 'flex',\n  flexGrow: 1,\n  flexDirection: 'column',\n  overflowY: 'scroll',\n  padding: '10px'\n} as any)\n\n/**\n * Component\n */\nexport default function ChatPage() {\n  const [topic, setTopic] = useState('')\n  const [messages, setMessages] = useState<\n    {\n      message: string\n      authorAccount: string\n    }[]\n  >([])\n  const { eip155Address } = useSnapshot(SettingsStore.state)\n  const { query } = useRouter()\n  const lastMessageRef = useRef<null | HTMLDivElement>(null)\n\n  const fullEip155Address = `eip155:1:${eip155Address}`\n\n  async function onOutgoingMessage(outgoingMessage: string) {\n    await chatClient.message({\n      topic,\n\n      message: outgoingMessage,\n      authorAccount: fullEip155Address,\n      timestamp: Date.now()\n    })\n\n    if (chatClient.getMessages({ topic }).length) {\n      setMessages(chatClient.getMessages({ topic }))\n    }\n  }\n\n  function isOutgoingMessage(authorAccount: string) {\n    return authorAccount === fullEip155Address\n  }\n\n  function getChatTitle() {\n    if (typeof query.peerAccount !== 'string') return ''\n\n    return demoAddressResolver[query.peerAccount] ?? truncate(query.peerAccount, 24)\n  }\n\n  useEffect(() => {\n    if (query?.topic) {\n      setTopic(query.topic as string)\n    }\n  }, [query])\n\n  useEffect(() => {\n    // Set existing messages on load.\n    if (topic) {\n      try {\n        const messages = chatClient.getMessages({ topic })\n        console.log('getMessages for topic: ', topic, messages)\n        setMessages(messages)\n      } catch (error) {}\n    }\n  }, [topic])\n\n  useEffect(() => {\n    lastMessageRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }, [messages])\n\n  useEffect(() => {\n    if (topic) {\n      // Update local messages state on new message.\n      chatClient.once('chat_message', eventArgs => {\n        console.log('new chat message:', eventArgs)\n\n        setMessages(chatClient.getMessages({ topic }))\n      })\n    }\n  }, [messages, topic])\n\n  return (\n    <Fragment>\n      <PageHeader title={getChatTitle()} backButtonHref=\"/chats\" withBackButton />\n      <ChatContainer>\n        <MessagesContainer>\n          {messages.map(({ message, authorAccount }, i) => (\n            <ChatMessage\n              key={i}\n              message={message}\n              messageType={isOutgoingMessage(authorAccount) ? 'outgoing' : 'incoming'}\n            />\n          ))}\n          <div ref={lastMessageRef}></div>\n        </MessagesContainer>\n        <ChatboxInput handleSend={onOutgoingMessage} />\n      </ChatContainer>\n    </Fragment>\n  )\n}\n"]}